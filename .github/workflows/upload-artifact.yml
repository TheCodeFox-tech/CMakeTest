name: upload Artifact

on: 
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
  
    strategy:
        matrix:
          os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
    
    - name: set release date
      run: |
        echo "RELEASE_DATE=$(date --rfc-3339=date)" >> ${GITHUB_ENV}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
     
    - name: Delete old dirs
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
        rm -rf release
        fi
    
    - name: Create dirs
      run: |
        mkdir release
        cd release
        mkdir Linux
        mkdir Windows
        mkdir MacOS
     
    - name: Copy file
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
        cp ./build/Main ./release/Linux/Build-${{ env.RELEASE_DATE }}.out
        elif [ "$RUNNER_OS" == "Windows" ]; then
        cp ./build/Main ./release/Windows/Build-${{ env.RELEASE_DATE }}.exe
        elif [ "$RUNNER_OS" == "MacOS" ]; then
        cp ./build/Main ./release/MacOS/Build-${{ env.RELEASE_DATE }}.out
        fi
      
    - name: Commit files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        pushd ./release
        git add . -f
        popd
        if [ "$RUNNER_OS" != "Windows" ]; then
        rm -rf build
        else
        rm .\build -recurse -force
        git commit -m "Add artifact" -a
    
    - name: Push code
      run: |
        git pull --rebase origin "${GITHUB_REF}"
        git push origin "${GITHUB_REF}"
        
